apiVersion: apps/v1
kind: Deployment
metadata: 
  name: {{ .Values.generalInfo.name | default .Release.Name }}-deployment
  namespace: {{ .Values.generalInfo.namespace | default "default" }}
  labels:
    {{- range $key, $val := .Values.generalInfo.labels -}}
      {{- $key | nindent 4 }}: {{ $val | quote }}
    {{- end }}
    # version: "{{ .Values.generalInfo.version | default .Chart.Version .Release.Revision }}"
spec:
  replicas: {{ .Values.deployment.replicas | default 1 }}
  revisionHistoryLimit: {{ .Values.deployment.historyLimit | default 10 }}
  selector:
    matchLabels:  
      name: {{ .Values.generalInfo.name | default .Release.Name }}-pod
  strategy:
  #  type: RollingUpdate (By default)
    # type: Recreate
  template:
    metadata:
      name: {{ .Values.generalInfo.name | default .Release.Name }}-pod
      namespace: {{ .Values.generalInfo.namespace | default "default" }}
      labels:
        name: {{ .Values.generalInfo.name | default .Release.Name }}-pod
    spec:
      affinity:
        {{- toYaml .Values.deployment.affinity | nindent 10 }}
      # serviceAccountName: {{ .Values.generalInfo.name | default .Release.Name }}-svcan
      # secucityContext:
      #   fsGroup: 472
      #   runAsGroup: 472
      #   runAsUser: 472
      # restartPolicy: {{ .Values.deployment.restartPolicy | default "Always" }}
      containers:
      - name: {{ .Values.generalInfo.name | default .Release.Name }}-pod
        image: {{ ( include "deploy.image-name" .) | quote }}
        imagePullPolicy: {{ .Values.deployment.imagePullPolicy | default "IfNotPresent" }}
        volumeMounts: 
          {{- toYaml .Values.deployment.volumeMounts | nindent 10}}
        ports:
          - name: web
            containerPort: {{ .Values.deployment.containerPort | default "80" }}
            protocol: TCP
# define all of the ConfigMap's data as container environment variables
        envFrom:
          - configMapRef:
              name: {{ .Values.generalInfo.name }}-configmap
        # env:
        #   - name: GF_SECURITY_ADMIN_USER
        #     valueFrom:
        #       secretKeyRef:
        #         name: grafana
        #         key: admin-user
        #   - name: GF_SECURITY_ADMIN_PASSWORD
        #     valueFrom:
        #       secretKeyRef:
        #         name: grafana
        #         key: admin-password
        # - name: GREETING
        #   valueFrom:
        #     configMapKeyRef:
        #       name: demo-config
        #       key: greeting
        livenessProbe:
          {{- toYaml .Values.deployment.livenessProbe | nindent 10 }}
        readinessProbe:
          {{- toYaml .Values.deployment.readinessProbe | nindent 10 }}
        resources:
          requests:
            {{- toYaml .Values.deployment.resources.requests | nindent 12 }}
          limits:
            {{- toYaml .Values.deployment.resources.limits | nindent 12 }}
        # affinity:
        #   {{- toYaml .Values.deployment.affinity | nindent 10 | quote }}
      tolerations:
        {{- toYaml .Values.deployment.tolerations | nindent 8 }}
      nodeSelector:
        {{- toYaml .Values.deployment.nodeSelector | nindent 8 }}
    volumes:
      {{- toYaml .Values.deployment.volumes | nindent 6 }}
    # - name: config
    #   configMap:
    #     name: grafana
    # - name: storage
    #   emptyDir: {}
